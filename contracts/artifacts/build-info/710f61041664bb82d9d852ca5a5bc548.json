{
	"id": "710f61041664bb82d9d852ca5a5bc548",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/SafeToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.0;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract SafeToken {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances;\r\n    uint256 public totalSupply = 2**256 - 1;\r\n\r\n    constructor() {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value, \"Insufficient balance\");\r\n        balances[msg.sender] = balances[msg.sender].sub(_value); // Safe subtraction\r\n        balances[_to] = balances[_to].add(_value); // Safe addition\r\n        return true;\r\n    }\r\n}"
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/math/SafeMath.sol\":630:7224  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":630:7224  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cc5ccbefc29d67150bb7ac9852baf51bca8fdb0c6c6b4ecf36228cfb6c56e1b564736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cc5ccbefc29d67150bb7ac9852baf51bca8fdb0c6c6b4ecf36228cfb6c56e1b564736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0x5C 0xCB 0xEF 0xC2 SWAP14 PUSH8 0x150BB7AC9852BAF5 SHL 0xCA DUP16 0xDB 0xC PUSH13 0x6B4ECF36228CFB6C56E1B56473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "630:6594:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cc5ccbefc29d67150bb7ac9852baf51bca8fdb0c6c6b4ecf36228cfb6c56e1b564736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0x5C 0xCB 0xEF 0xC2 SWAP14 PUSH8 0x150BB7AC9852BAF5 SHL 0xCA DUP16 0xDB 0xC PUSH13 0x6B4ECF36228CFB6C56E1B56473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "630:6594:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cc5ccbefc29d67150bb7ac9852baf51bca8fdb0c6c6b4ecf36228cfb6c56e1b564736f6c63430007060033",
									".code": [
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/SafeToken.sol": {
				"SafeToken": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "balances",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SafeToken.sol\":115:688  contract SafeToken {\r... */\n  mstore(0x40, 0x80)\n    /* \"contracts/SafeToken.sol\":255:265  2**256 - 1 */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"contracts/SafeToken.sol\":226:265  uint256 public totalSupply = 2**256 - 1 */\n  0x01\n  sstore\n    /* \"contracts/SafeToken.sol\":274:341  constructor() {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/SafeToken.sol\":322:333  totalSupply */\n  sload(0x01)\n    /* \"contracts/SafeToken.sol\":299:307  balances */\n  0x00\n    /* \"contracts/SafeToken.sol\":299:319  balances[msg.sender] */\n  dup1\n    /* \"contracts/SafeToken.sol\":308:318  msg.sender */\n  caller\n    /* \"contracts/SafeToken.sol\":299:319  balances[msg.sender] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/SafeToken.sol\":299:333  balances[msg.sender] = totalSupply */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/SafeToken.sol\":115:688  contract SafeToken {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SafeToken.sol\":115:688  contract SafeToken {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x18160ddd\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x27e235e3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/SafeToken.sol\":226:265  uint256 public totalSupply = 2**256 - 1 */\n    tag_3:\n      tag_6\n      tag_7\n      jump\t// in\n    tag_6:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/SafeToken.sol\":176:219  mapping(address => uint256) public balances */\n    tag_4:\n      tag_8\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_9:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_10\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/SafeToken.sol\":349:685  function transfer(address _to, uint256 _value) public returns (bool success) {\r... */\n    tag_5:\n      tag_11\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_13\n      jump\t// in\n    tag_11:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/SafeToken.sol\":226:265  uint256 public totalSupply = 2**256 - 1 */\n    tag_7:\n      sload(0x01)\n      dup2\n      jump\t// out\n        /* \"contracts/SafeToken.sol\":176:219  mapping(address => uint256) public balances */\n    tag_10:\n      mstore(0x20, 0x00)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/SafeToken.sol\":349:685  function transfer(address _to, uint256 _value) public returns (bool success) {\r... */\n    tag_13:\n        /* \"contracts/SafeToken.sol\":412:424  bool success */\n      0x00\n        /* \"contracts/SafeToken.sol\":469:475  _value */\n      dup2\n        /* \"contracts/SafeToken.sol\":445:453  balances */\n      0x00\n        /* \"contracts/SafeToken.sol\":445:465  balances[msg.sender] */\n      dup1\n        /* \"contracts/SafeToken.sol\":454:464  msg.sender */\n      caller\n        /* \"contracts/SafeToken.sol\":445:465  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/SafeToken.sol\":445:475  balances[msg.sender] >= _value */\n      lt\n      iszero\n        /* \"contracts/SafeToken.sol\":437:500  require(balances[msg.sender] >= _value, \"Insufficient balance\") */\n      tag_15\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x14\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x496e73756666696369656e742062616c616e6365000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_15:\n        /* \"contracts/SafeToken.sol\":534:566  balances[msg.sender].sub(_value) */\n      tag_16\n        /* \"contracts/SafeToken.sol\":559:565  _value */\n      dup3\n        /* \"contracts/SafeToken.sol\":534:542  balances */\n      0x00\n        /* \"contracts/SafeToken.sol\":534:554  balances[msg.sender] */\n      dup1\n        /* \"contracts/SafeToken.sol\":543:553  msg.sender */\n      caller\n        /* \"contracts/SafeToken.sol\":534:554  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/SafeToken.sol\":534:558  balances[msg.sender].sub */\n      tag_17\n      swap1\n        /* \"contracts/SafeToken.sol\":534:566  balances[msg.sender].sub(_value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_16:\n        /* \"contracts/SafeToken.sol\":511:519  balances */\n      0x00\n        /* \"contracts/SafeToken.sol\":511:531  balances[msg.sender] */\n      dup1\n        /* \"contracts/SafeToken.sol\":520:530  msg.sender */\n      caller\n        /* \"contracts/SafeToken.sol\":511:531  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/SafeToken.sol\":511:566  balances[msg.sender] = balances[msg.sender].sub(_value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/SafeToken.sol\":613:638  balances[_to].add(_value) */\n      tag_18\n        /* \"contracts/SafeToken.sol\":631:637  _value */\n      dup3\n        /* \"contracts/SafeToken.sol\":613:621  balances */\n      0x00\n        /* \"contracts/SafeToken.sol\":613:626  balances[_to] */\n      dup1\n        /* \"contracts/SafeToken.sol\":622:625  _to */\n      dup7\n        /* \"contracts/SafeToken.sol\":613:626  balances[_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/SafeToken.sol\":613:630  balances[_to].add */\n      tag_19\n      swap1\n        /* \"contracts/SafeToken.sol\":613:638  balances[_to].add(_value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_18:\n        /* \"contracts/SafeToken.sol\":597:605  balances */\n      0x00\n        /* \"contracts/SafeToken.sol\":597:610  balances[_to] */\n      dup1\n        /* \"contracts/SafeToken.sol\":606:609  _to */\n      dup6\n        /* \"contracts/SafeToken.sol\":597:610  balances[_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/SafeToken.sol\":597:638  balances[_to] = balances[_to].add(_value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/SafeToken.sol\":673:677  true */\n      0x01\n        /* \"contracts/SafeToken.sol\":666:677  return true */\n      swap1\n      pop\n        /* \"contracts/SafeToken.sol\":349:685  function transfer(address _to, uint256 _value) public returns (bool success) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_17:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3194:3201  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3226:3227  a */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3221:3222  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3221:3227  b <= a */\n      gt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3213:3262  require(b <= a, \"SafeMath: subtraction overflow\") */\n      tag_21\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_21:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3283:3284  b */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3279:3280  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3279:3284  a - b */\n      sub\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3272:3284  return a - b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_19:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2748:2755  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2767:2776  uint256 c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2783:2784  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2779:2780  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2779:2784  a + b */\n      add\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2767:2784  uint256 c = a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2807:2808  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2802:2803  c */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2802:2808  c >= a */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2840  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_23\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_23:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2857:2858  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2850:2858  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220ff6daafcb6661cd3fec30588c26f568670ad23abcc4a45653544c7399ec1d5dc64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60015534801561003457600080fd5b506001546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610465806100896000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806318160ddd1461004657806327e235e314610064578063a9059cbb146100bc575b600080fd5b61004e610120565b6040518082815260200191505060405180910390f35b6100a66004803603602081101561007a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610126565b6040518082815260200191505060405180910390f35b610108600480360360408110156100d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061013e565b60405180821515815260200191505060405180910390f35b60015481565b60006020528060005260406000206000915090505481565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156101f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e73756666696369656e742062616c616e636500000000000000000000000081525060200191505060405180910390fd5b610245826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461032490919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102d8826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103a790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60008282111561039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b600080828401905083811015610425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220ff6daafcb6661cd3fec30588c26f568670ad23abcc4a45653544c7399ec1d5dc64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x465 DUP1 PUSH2 0x89 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x18160DDD EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xBC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x120 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x126 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x108 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x13E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E73756666696369656E742062616C616E6365000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x245 DUP3 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x324 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x2D8 DUP3 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3A7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x39C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x425 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT PUSH14 0xAAFCB6661CD3FEC30588C26F5686 PUSH17 0xAD23ABCC4A45653544C7399EC1D5DC6473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "115:573:1:-:0;;;255:10;226:39;;274:67;;;;;;;;;;322:11;;299:8;:20;308:10;299:20;;;;;;;;;;;;;;;:34;;;;115:573;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100415760003560e01c806318160ddd1461004657806327e235e314610064578063a9059cbb146100bc575b600080fd5b61004e610120565b6040518082815260200191505060405180910390f35b6100a66004803603602081101561007a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610126565b6040518082815260200191505060405180910390f35b610108600480360360408110156100d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061013e565b60405180821515815260200191505060405180910390f35b60015481565b60006020528060005260406000206000915090505481565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156101f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e73756666696369656e742062616c616e636500000000000000000000000081525060200191505060405180910390fd5b610245826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461032490919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102d8826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103a790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60008282111561039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b600080828401905083811015610425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fea2646970667358221220ff6daafcb6661cd3fec30588c26f568670ad23abcc4a45653544c7399ec1d5dc64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x18160DDD EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xBC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x120 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x126 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x108 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x13E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E73756666696369656E742062616C616E6365000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x245 DUP3 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x324 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x2D8 DUP3 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3A7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x39C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x425 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT PUSH14 0xAAFCB6661CD3FEC30588C26F5686 PUSH17 0xAD23ABCC4A45653544C7399EC1D5DC6473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "115:573:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;226:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;176:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;349:336;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;226:39;;;;:::o;176:43::-;;;;;;;;;;;;;;;;;:::o;349:336::-;412:12;469:6;445:8;:20;454:10;445:20;;;;;;;;;;;;;;;;:30;;437:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;534:32;559:6;534:8;:20;543:10;534:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;511:8;:20;520:10;511:20;;;;;;;;;;;;;;;:55;;;;613:25;631:6;613:8;:13;622:3;613:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;597:8;:13;606:3;597:13;;;;;;;;;;;;;;;:41;;;;673:4;666:11;;349:336;;;;:::o;3136:155:0:-;3194:7;3226:1;3221;:6;;3213:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3283:1;3279;:5;3272:12;;3136:155;;;;:::o;2690:175::-;2748:7;2767:9;2783:1;2779;:5;2767:17;;2807:1;2802;:6;;2794:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2850:8;;;2690:175;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "225000",
								"executionCost": "41178",
								"totalCost": "266178"
							},
							"external": {
								"balances(address)": "1169",
								"totalSupply()": "983",
								"transfer(address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 115,
									"end": 688,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 115,
									"end": 688,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 115,
									"end": 688,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 255,
									"end": 265,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 226,
									"end": 265,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 226,
									"end": 265,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 274,
									"end": 341,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 274,
									"end": 341,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 274,
									"end": 341,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 274,
									"end": 341,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 274,
									"end": 341,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 274,
									"end": 341,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 274,
									"end": 341,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 274,
									"end": 341,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 274,
									"end": 341,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 274,
									"end": 341,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 274,
									"end": 341,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 322,
									"end": 333,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 322,
									"end": 333,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 299,
									"end": 307,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 299,
									"end": 319,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 308,
									"end": 318,
									"name": "CALLER",
									"source": 1
								},
								{
									"begin": 299,
									"end": 319,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 299,
									"end": 319,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 299,
									"end": 319,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 299,
									"end": 319,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 299,
									"end": 319,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 299,
									"end": 319,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 299,
									"end": 319,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 299,
									"end": 319,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 299,
									"end": 319,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 299,
									"end": 319,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 299,
									"end": 319,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 299,
									"end": 319,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 299,
									"end": 319,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 299,
									"end": 319,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 299,
									"end": 319,
									"name": "KECCAK256",
									"source": 1
								},
								{
									"begin": 299,
									"end": 333,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 299,
									"end": 333,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 299,
									"end": 333,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 299,
									"end": 333,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 115,
									"end": 688,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 115,
									"end": 688,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 115,
									"end": 688,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 115,
									"end": 688,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 115,
									"end": 688,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 115,
									"end": 688,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 115,
									"end": 688,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ff6daafcb6661cd3fec30588c26f568670ad23abcc4a45653544c7399ec1d5dc64736f6c63430007060033",
									".code": [
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH",
											"source": 1,
											"value": "18160DDD"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH",
											"source": 1,
											"value": "27E235E3"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH",
											"source": 1,
											"value": "A9059CBB"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 115,
											"end": 688,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 115,
											"end": 688,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 226,
											"end": 265,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 226,
											"end": 265,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 226,
											"end": 265,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 226,
											"end": 265,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 226,
											"end": 265,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 226,
											"end": 265,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 226,
											"end": 265,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 226,
											"end": 265,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 226,
											"end": 265,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 226,
											"end": 265,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 226,
											"end": 265,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 176,
											"end": 219,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 349,
											"end": 685,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 412,
											"end": 424,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 445,
											"end": 453,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 445,
											"end": 465,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 454,
											"end": 464,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 445,
											"end": 465,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 445,
											"end": 465,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 445,
											"end": 465,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 445,
											"end": 465,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 445,
											"end": 465,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 445,
											"end": 465,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 445,
											"end": 475,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 445,
											"end": 475,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "496E73756666696369656E742062616C616E6365000000000000000000000000"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 437,
											"end": 500,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 437,
											"end": 500,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 534,
											"end": 566,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 559,
											"end": 565,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 534,
											"end": 542,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 534,
											"end": 554,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 543,
											"end": 553,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 534,
											"end": 554,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 534,
											"end": 554,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 534,
											"end": 554,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 534,
											"end": 554,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 534,
											"end": 554,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 534,
											"end": 554,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 534,
											"end": 558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 534,
											"end": 558,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 534,
											"end": 566,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 534,
											"end": 566,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 534,
											"end": 566,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 534,
											"end": 566,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 534,
											"end": 566,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 534,
											"end": 566,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 534,
											"end": 566,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 511,
											"end": 519,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 511,
											"end": 531,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 520,
											"end": 530,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 511,
											"end": 531,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 511,
											"end": 531,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 511,
											"end": 531,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 511,
											"end": 531,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 511,
											"end": 531,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 511,
											"end": 531,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 511,
											"end": 531,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 511,
											"end": 531,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 511,
											"end": 531,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 511,
											"end": 531,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 511,
											"end": 531,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 511,
											"end": 531,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 511,
											"end": 531,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 511,
											"end": 531,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 511,
											"end": 531,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 511,
											"end": 566,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 511,
											"end": 566,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 511,
											"end": 566,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 511,
											"end": 566,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 613,
											"end": 638,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 631,
											"end": 637,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 613,
											"end": 621,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 613,
											"end": 626,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 622,
											"end": 625,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 613,
											"end": 626,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 613,
											"end": 626,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 613,
											"end": 626,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 613,
											"end": 626,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 613,
											"end": 626,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 613,
											"end": 626,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 613,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 613,
											"end": 630,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 613,
											"end": 638,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 613,
											"end": 638,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 613,
											"end": 638,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFF"
										},
										{
											"begin": 613,
											"end": 638,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 613,
											"end": 638,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 613,
											"end": 638,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 613,
											"end": 638,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 597,
											"end": 605,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 597,
											"end": 610,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 606,
											"end": 609,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 597,
											"end": 610,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 597,
											"end": 610,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 597,
											"end": 610,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 597,
											"end": 610,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 597,
											"end": 610,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 597,
											"end": 610,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 597,
											"end": 610,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 597,
											"end": 610,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 597,
											"end": 610,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 597,
											"end": 610,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 597,
											"end": 610,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 597,
											"end": 610,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 597,
											"end": 610,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 597,
											"end": 610,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 597,
											"end": 610,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 597,
											"end": 638,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 597,
											"end": 638,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 597,
											"end": 638,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 597,
											"end": 638,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 673,
											"end": 677,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 666,
											"end": 677,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 666,
											"end": 677,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 349,
											"end": 685,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3194,
											"end": 3201,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3226,
											"end": 3227,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3221,
											"end": 3222,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 0,
											"value": "1E"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 0,
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3283,
											"end": 3284,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3279,
											"end": 3280,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3272,
											"end": 3284,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3272,
											"end": 3284,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2748,
											"end": 2755,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2767,
											"end": 2776,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2783,
											"end": 2784,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2780,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2767,
											"end": 2784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2767,
											"end": 2784,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2807,
											"end": 2808,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2802,
											"end": 2803,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "1B"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2857,
											"end": 2858,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"balances(address)": "27e235e3",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeToken.sol\":\"SafeToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]},\"contracts/SafeToken.sol\":{\"keccak256\":\"0x2562ee4f704b06bb1ef23d2bcd2aeb34f36b9ec245a621b7744b96a312faef17\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1342c339685cf8cbc2f5a78c6e0ce2782b8120189a2f45d3de7550fbc3c2bb36\",\"dweb:/ipfs/Qmd3x3opbheqTcHgc3JJ3NajDt15DiEE19zwxL7Ce4fy9e\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 364,
								"contract": "contracts/SafeToken.sol:SafeToken",
								"label": "balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 371,
								"contract": "contracts/SafeToken.sol:SafeToken",
								"label": "totalSupply",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							354
						]
					},
					"id": 355,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "66:563:0",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 354,
							"linearizedBaseContracts": [
								354
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 32,
										"nodeType": "Block",
										"src": "865:98:0",
										"statements": [
											{
												"assignments": [
													15
												],
												"declarations": [
													{
														"constant": false,
														"id": 15,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 32,
														"src": "875:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 14,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "875:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 19,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 18,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 16,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "887:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 17,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "891:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "887:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "875:17:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 22,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 20,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "906:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 21,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "910:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "906:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 27,
												"nodeType": "IfStatement",
												"src": "902:28:0",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 23,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "921:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 24,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "928:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 25,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "920:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 13,
													"id": 26,
													"nodeType": "Return",
													"src": "913:17:0"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 28,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "948:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 29,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "954:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 30,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "947:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 13,
												"id": 31,
												"nodeType": "Return",
												"src": "940:16:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "653:131:0",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 33,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "805:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "816:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "804:22:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "850:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 9,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "850:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "856:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:15:0"
									},
									"scope": 354,
									"src": "789:174:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1185:75:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 45,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 38,
														"src": "1199:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 46,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 36,
														"src": "1203:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1199:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 52,
												"nodeType": "IfStatement",
												"src": "1195:28:0",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1214:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 49,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1221:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 50,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1213:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 44,
													"id": 51,
													"nodeType": "Return",
													"src": "1206:17:0"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1241:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 54,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 36,
																"src": "1247:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 55,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 38,
																"src": "1251:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1247:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 57,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1240:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 44,
												"id": 58,
												"nodeType": "Return",
												"src": "1233:20:0"
											}
										]
									},
									"documentation": {
										"id": 34,
										"nodeType": "StructuredDocumentation",
										"src": "969:135:0",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1125:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 35,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1125:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1136:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1124:22:0"
									},
									"returnParameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1170:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 40,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1170:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1176:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1176:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1169:15:0"
									},
									"scope": 354,
									"src": "1109:151:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 100,
										"nodeType": "Block",
										"src": "1484:359:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 72,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 63,
														"src": "1716:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 73,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1721:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1716:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 79,
												"nodeType": "IfStatement",
												"src": "1712:28:0",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "74727565",
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1732:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"hexValue": "30",
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1738:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 77,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1731:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 71,
													"id": 78,
													"nodeType": "Return",
													"src": "1724:16:0"
												}
											},
											{
												"assignments": [
													81
												],
												"declarations": [
													{
														"constant": false,
														"id": 81,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 100,
														"src": "1750:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 80,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1750:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 85,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 82,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 63,
														"src": "1762:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 83,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "1766:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1762:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1750:17:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 88,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 86,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 81,
															"src": "1781:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 87,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "1785:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1781:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 89,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "1790:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1781:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 95,
												"nodeType": "IfStatement",
												"src": "1777:33:0",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 91,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1801:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1808:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 93,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1800:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 71,
													"id": 94,
													"nodeType": "Return",
													"src": "1793:17:0"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1828:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 97,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 81,
															"src": "1834:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 98,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1827:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 71,
												"id": 99,
												"nodeType": "Return",
												"src": "1820:16:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1266:137:0",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 101,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1424:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 62,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1435:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 64,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1435:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1423:22:0"
									},
									"returnParameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 68,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1469:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 67,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1469:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "1475:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 69,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1468:15:0"
									},
									"scope": 354,
									"src": "1408:435:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 127,
										"nodeType": "Block",
										"src": "2068:76:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 113,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 106,
														"src": "2082:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 114,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2087:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2082:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2078:29:0",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 116,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2098:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2105:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 118,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2097:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 112,
													"id": 119,
													"nodeType": "Return",
													"src": "2090:17:0"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 121,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2125:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 122,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 104,
																"src": "2131:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 123,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 106,
																"src": "2135:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2131:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 125,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2124:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 112,
												"id": 126,
												"nodeType": "Return",
												"src": "2117:20:0"
											}
										]
									},
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "1849:138:0",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "2008:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "2019:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2007:22:0"
									},
									"returnParameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "2053:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 108,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2053:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 111,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "2059:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2059:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2052:15:0"
									},
									"scope": 354,
									"src": "1992:152:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 154,
										"nodeType": "Block",
										"src": "2379:76:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 140,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "2393:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 141,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2398:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2393:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 147,
												"nodeType": "IfStatement",
												"src": "2389:29:0",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 143,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2409:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 144,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2416:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 145,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2408:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 139,
													"id": 146,
													"nodeType": "Return",
													"src": "2401:17:0"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 148,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2436:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 151,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 149,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 131,
																"src": "2442:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 150,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "2446:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2442:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 152,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2435:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 139,
												"id": 153,
												"nodeType": "Return",
												"src": "2428:20:0"
											}
										]
									},
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "2150:148:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 155,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "2319:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "2330:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2318:22:0"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "2364:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 135,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2364:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "2370:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2370:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2363:15:0"
									},
									"scope": 354,
									"src": "2303:152:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 180,
										"nodeType": "Block",
										"src": "2757:108:0",
										"statements": [
											{
												"assignments": [
													166
												],
												"declarations": [
													{
														"constant": false,
														"id": 166,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 180,
														"src": "2767:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 165,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2767:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 170,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 169,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 167,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 158,
														"src": "2779:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 168,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 160,
														"src": "2783:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2779:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2767:17:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 174,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 172,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 166,
																"src": "2802:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 173,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 158,
																"src": "2807:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2802:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 175,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2810:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 171,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2794:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2794:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "2794:46:0"
											},
											{
												"expression": {
													"id": 178,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 166,
													"src": "2857:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 164,
												"id": 179,
												"nodeType": "Return",
												"src": "2850:8:0"
											}
										]
									},
									"documentation": {
										"id": 156,
										"nodeType": "StructuredDocumentation",
										"src": "2461:224:0",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 181,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "2703:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2703:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "2714:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 159,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2714:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2702:22:0"
									},
									"returnParameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "2748:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2747:9:0"
									},
									"scope": 354,
									"src": "2690:175:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 202,
										"nodeType": "Block",
										"src": "3203:88:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 192,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 186,
																"src": "3221:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 193,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 184,
																"src": "3226:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3221:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 195,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3229:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 191,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3213:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3213:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 197,
												"nodeType": "ExpressionStatement",
												"src": "3213:49:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 198,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 184,
														"src": "3279:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 199,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 186,
														"src": "3283:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3279:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 190,
												"id": 201,
												"nodeType": "Return",
												"src": "3272:12:0"
											}
										]
									},
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "2871:260:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 203,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "3149:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3149:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "3160:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3148:22:0"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "3194:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3194:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3193:9:0"
									},
									"scope": 354,
									"src": "3136:155:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 236,
										"nodeType": "Block",
										"src": "3605:148:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 213,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 206,
														"src": "3619:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 214,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3624:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3619:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 218,
												"nodeType": "IfStatement",
												"src": "3615:20:0",
												"trueBody": {
													"expression": {
														"hexValue": "30",
														"id": 216,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3634:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 212,
													"id": 217,
													"nodeType": "Return",
													"src": "3627:8:0"
												}
											},
											{
												"assignments": [
													220
												],
												"declarations": [
													{
														"constant": false,
														"id": 220,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 236,
														"src": "3645:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 219,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3645:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 224,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 221,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 206,
														"src": "3657:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 222,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 208,
														"src": "3661:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3657:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3645:17:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 228,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 226,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 220,
																	"src": "3680:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 227,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 206,
																	"src": "3684:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3680:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 229,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 208,
																"src": "3689:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3680:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 231,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3692:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 225,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3672:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3672:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 233,
												"nodeType": "ExpressionStatement",
												"src": "3672:56:0"
											},
											{
												"expression": {
													"id": 234,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 220,
													"src": "3745:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 212,
												"id": 235,
												"nodeType": "Return",
												"src": "3738:8:0"
											}
										]
									},
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "3297:236:0",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3551:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3562:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3562:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3550:22:0"
									},
									"returnParameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3596:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3595:9:0"
									},
									"scope": 354,
									"src": "3538:215:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 258,
										"nodeType": "Block",
										"src": "4284:83:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 248,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 242,
																"src": "4302:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 249,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4306:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4302:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 247,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4294:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4294:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 253,
												"nodeType": "ExpressionStatement",
												"src": "4294:44:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 254,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 240,
														"src": "4355:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 255,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 242,
														"src": "4359:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4355:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 246,
												"id": 257,
												"nodeType": "Return",
												"src": "4348:12:0"
											}
										]
									},
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "3759:453:0",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 259,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "4230:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4230:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "4241:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4241:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4229:22:0"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "4275:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4274:9:0"
									},
									"scope": 354,
									"src": "4217:150:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 280,
										"nodeType": "Block",
										"src": "4887:81:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 272,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 270,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 264,
																"src": "4905:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 271,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4909:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4905:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 273,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 269,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4897:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 275,
												"nodeType": "ExpressionStatement",
												"src": "4897:42:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 276,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 262,
														"src": "4956:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 277,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "4960:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4956:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 268,
												"id": 279,
												"nodeType": "Return",
												"src": "4949:12:0"
											}
										]
									},
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "4373:442:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "4833:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4833:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "4844:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 263,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4844:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4832:22:0"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "4878:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4878:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4877:9:0"
									},
									"scope": 354,
									"src": "4820:148:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 304,
										"nodeType": "Block",
										"src": "5527:68:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 294,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 286,
																"src": "5545:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 295,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 284,
																"src": "5550:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5545:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 297,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "5553:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 293,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5537:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 299,
												"nodeType": "ExpressionStatement",
												"src": "5537:29:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 300,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 284,
														"src": "5583:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 301,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 286,
														"src": "5587:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5583:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 292,
												"id": 303,
												"nodeType": "Return",
												"src": "5576:12:0"
											}
										]
									},
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "4974:453:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "5445:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "5456:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "5467:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 287,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5467:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5444:50:0"
									},
									"returnParameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "5518:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5518:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5517:9:0"
									},
									"scope": 354,
									"src": "5432:163:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 328,
										"nodeType": "Block",
										"src": "6347:67:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 318,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 310,
																"src": "6365:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 319,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6369:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6365:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 321,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 312,
															"src": "6372:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 317,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6357:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6357:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 323,
												"nodeType": "ExpressionStatement",
												"src": "6357:28:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 324,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "6402:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 325,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 310,
														"src": "6406:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6402:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 316,
												"id": 327,
												"nodeType": "Return",
												"src": "6395:12:0"
											}
										]
									},
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "5601:646:0",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 329,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "6265:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6265:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "6276:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6276:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "6287:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 311,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6287:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6264:50:0"
									},
									"returnParameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "6338:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6338:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6337:9:0"
									},
									"scope": 354,
									"src": "6252:162:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 352,
										"nodeType": "Block",
										"src": "7155:67:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 342,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 334,
																"src": "7173:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7177:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7173:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 345,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "7180:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 341,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7165:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7165:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 347,
												"nodeType": "ExpressionStatement",
												"src": "7165:28:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 348,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 332,
														"src": "7210:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 349,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 334,
														"src": "7214:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7210:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 340,
												"id": 351,
												"nodeType": "Return",
												"src": "7203:12:0"
											}
										]
									},
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "6420:635:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 353,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "7073:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7073:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 334,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "7084:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7084:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "7095:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 335,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7095:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7072:50:0"
									},
									"returnParameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "7146:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7146:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7145:9:0"
									},
									"scope": 354,
									"src": "7060:162:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 355,
							"src": "630:6594:0"
						}
					],
					"src": "33:7192:0"
				},
				"id": 0
			},
			"contracts/SafeToken.sol": {
				"ast": {
					"absolutePath": "contracts/SafeToken.sol",
					"exportedSymbols": {
						"SafeMath": [
							354
						],
						"SafeToken": [
							429
						]
					},
					"id": 430,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 356,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/math/SafeMath.sol",
							"id": 357,
							"nodeType": "ImportDirective",
							"scope": 430,
							"sourceUnit": 355,
							"src": "60:51:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 429,
							"linearizedBaseContracts": [
								429
							],
							"name": "SafeToken",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 360,
									"libraryName": {
										"id": 358,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 354,
										"src": "147:8:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$354",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "141:27:1",
									"typeName": {
										"id": 359,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "160:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "27e235e3",
									"id": 364,
									"mutability": "mutable",
									"name": "balances",
									"nodeType": "VariableDeclaration",
									"scope": 429,
									"src": "176:43:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 363,
										"keyType": {
											"id": 361,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "184:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "176:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 362,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "195:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "18160ddd",
									"id": 371,
									"mutability": "mutable",
									"name": "totalSupply",
									"nodeType": "VariableDeclaration",
									"scope": 429,
									"src": "226:39:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 365,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "226:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1",
											"typeString": "int_const 1157...(70 digits omitted)...9935"
										},
										"id": 370,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"commonType": {
												"typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639936_by_1",
												"typeString": "int_const 1157...(70 digits omitted)...9936"
											},
											"id": 368,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"leftExpression": {
												"hexValue": "32",
												"id": 366,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "255:1:1",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_2_by_1",
													"typeString": "int_const 2"
												},
												"value": "2"
											},
											"nodeType": "BinaryOperation",
											"operator": "**",
											"rightExpression": {
												"hexValue": "323536",
												"id": 367,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "258:3:1",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_256_by_1",
													"typeString": "int_const 256"
												},
												"value": "256"
											},
											"src": "255:6:1",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639936_by_1",
												"typeString": "int_const 1157...(70 digits omitted)...9936"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "-",
										"rightExpression": {
											"hexValue": "31",
											"id": 369,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "264:1:1",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"src": "255:10:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1",
											"typeString": "int_const 1157...(70 digits omitted)...9935"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 381,
										"nodeType": "Block",
										"src": "288:53:1",
										"statements": [
											{
												"expression": {
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 374,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "299:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 377,
														"indexExpression": {
															"expression": {
																"id": 375,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "308:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 376,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "308:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "299:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 378,
														"name": "totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 371,
														"src": "322:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "299:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 380,
												"nodeType": "ExpressionStatement",
												"src": "299:34:1"
											}
										]
									},
									"id": 382,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "285:2:1"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "288:0:1"
									},
									"scope": 429,
									"src": "274:67:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 427,
										"nodeType": "Block",
										"src": "426:259:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 392,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "445:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 395,
																"indexExpression": {
																	"expression": {
																		"id": 393,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "454:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 394,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "454:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "445:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 396,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 386,
																"src": "469:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "445:30:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e742062616c616e6365",
															"id": 398,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "477:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
																"typeString": "literal_string \"Insufficient balance\""
															},
															"value": "Insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
																"typeString": "literal_string \"Insufficient balance\""
															}
														],
														"id": 391,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "437:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "437:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 400,
												"nodeType": "ExpressionStatement",
												"src": "437:63:1"
											},
											{
												"expression": {
													"id": 412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 401,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "511:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 404,
														"indexExpression": {
															"expression": {
																"id": 402,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "520:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "520:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "511:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 410,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 386,
																"src": "559:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 405,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "534:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 408,
																"indexExpression": {
																	"expression": {
																		"id": 406,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "543:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "543:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "534:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 203,
															"src": "534:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 411,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "534:32:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "511:55:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 413,
												"nodeType": "ExpressionStatement",
												"src": "511:55:1"
											},
											{
												"expression": {
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 414,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "597:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 416,
														"indexExpression": {
															"id": 415,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "606:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "597:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 421,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 386,
																"src": "631:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 417,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "613:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 419,
																"indexExpression": {
																	"id": 418,
																	"name": "_to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "622:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "613:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 420,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 181,
															"src": "613:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "613:25:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "597:41:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 424,
												"nodeType": "ExpressionStatement",
												"src": "597:41:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "673:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 390,
												"id": 426,
												"nodeType": "Return",
												"src": "666:11:1"
											}
										]
									},
									"functionSelector": "a9059cbb",
									"id": 428,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "367:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "367:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "380:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 385,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "380:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "366:29:1"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"scope": 428,
												"src": "412:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 388,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "412:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "411:14:1"
									},
									"scope": 429,
									"src": "349:336:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 430,
							"src": "115:573:1"
						}
					],
					"src": "33:655:1"
				},
				"id": 1
			}
		}
	}
}